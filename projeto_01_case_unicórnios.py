# -*- coding: utf-8 -*-
"""Projeto 01 - Case Unicórnios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13G05YyjhDLBhev4tzjY0rdqxZQfqJ1M9
"""

#Importando as libs/bibliotecas:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

#Lendo a base de dados / data frame:
Base_Dados = pd.read_csv('Startups+in+2021+end.csv')

#Verificando a dimensão do arquivo a ser trabalhado:
Base_Dados.shape

#Verificando os primeiros registros do arquivo:
Base_Dados.head()

# Tratando a lista | Renomeando as colunas:
Base_Dados.rename(columns={
    'Unnamed: 0' : 'ID',
    'Company' : 'Empresa',
    'Valuation ($B)' : 'Valor ($)',
    'Date Joined' : 'Data de Adesão',
    'Country' : 'País',
    'City' : 'Cidade',
    'Industry' : 'Setor',
    'Select Investors': 'Investidores'
}, inplace=True )

#Verificando os tipos de informações das colunas:
Base_Dados.info()

#Verificando os campos nulos:
Base_Dados.isnull().sum()

#Visão gráfica:
plt.figure(figsize=(15,6))
plt.title('Campos Nulos')
sns.heatmap(Base_Dados.isnull())

#Campos únicos:
Base_Dados.nunique()

#Verificando cada valor único selecionando a coluna:
Base_Dados['Setor'].unique()

#Valores Únicos - Em rank de quantidades:
Base_Dados['Setor'].value_counts()

#Verificando valores únicos em rank por porcentagens:
Base_Dados['Setor'].value_counts(normalize=True)

#Verificando em gráfico de barras a análise dos setores:
plt.figure(figsize=(15,6))
plt.title('Análise dos Setores')
plt.bar(Base_Dados['Setor'].value_counts().index, Base_Dados['Setor'].value_counts())

#Corrigindo a posição da mensagem embaixo do gráfico:
plt.figure(figsize=(15,6))
plt.title('Análise dos Setores')
plt.bar(Base_Dados['Setor'].value_counts().index, Base_Dados['Setor'].value_counts())
plt.xticks(rotation=45, ha='right')

#Analisando o gráfico e tratando a porcentagem:
Analise = Base_Dados['País'].value_counts(normalize=True) * 100
Analise

#Fazendo análise com o gráfico pie/pizza:
plt.figure(figsize=(15,6))
plt.title('Análise dos Países')
plt.pie(
    Analise,
    labels=Analise.index,
    shadow=True,
    startangle=90,
    autopct='%1.1f%%'
);

#Fazendo análise com o gráfico pie/pizza porém apenas com os 10 primeiros da lista:
plt.figure(figsize=(15,6))
plt.title('Análise do top10 Países')
plt.pie(
    Analise.head(10),
    labels=Analise.index[0:10],
    shadow=True,
    startangle=90,
    autopct='%1.1f%%'
);

#Conversão de tipo de valores object para date:
Base_Dados['Data de Adesão'] = pd.to_datetime(Base_Dados['Data de Adesão'])

#OBS: Está informando ao pandas que na Base_Dados a coluna 'Data de Adesão precisa ser transformada (pd.to_datetime) para tempo de data, e informa qual a base e coluna novamente: Base_Dados['Data de Adesão']

#Extraindo o Ano e Mês:
Base_Dados['Mês'] = pd.DatetimeIndex(Base_Dados['Data de Adesão']).month
Base_Dados['Ano'] = pd.DatetimeIndex(Base_Dados['Data de Adesão']).year
Base_Dados.head()

#OBS: Criou duas novas colunas 'Mês' e 'Ano' onde usa o pandas para informar o mês'month' e ano 'year'.

#Tabela Analítica:
Analise_Agrupada = Base_Dados.groupby(by=['País', 'Ano', 'Mês']).count()['ID'].reset_index()
Analise_Agrupada

#Verificando apenas a tabela onde País = Brazil:
Analise_Agrupada.loc[
    Analise_Agrupada['País'] == 'Brazil'
]

#Retirando o símbolo $ nos valores:
Base_Dados['Valor ($)'].apply(lambda Linha: Linha.replace('$', ''))

#Caso queira alterar esse simbolo para R$:
#Base_Dados['Valor ($)'].apply(lambda Linha: Linha.replace('$', 'R$'))